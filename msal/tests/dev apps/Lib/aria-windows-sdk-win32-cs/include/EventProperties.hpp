// Copyright (c) Microsoft. All rights reserved.

#ifndef EVENTPROPERTIES_HPP
#define EVENTPROPERTIES_HPP

#include "EventProperty.hpp"
#include "Version.hpp"
#include "ctmacros.hpp"
#include "Enums.hpp"
#include <stdint.h>
#include <string>
#include <map>

// *INDENT-OFF*
namespace Microsoft { namespace Applications { namespace Telemetry {
// *INDENT-ON*


/// <summary>
/// The EventProperties class encapsulates event properties.
/// </summary>
	class ARIASDK_LIBABI EventProperties
	{
	public:
		/// <summary>
		/// Constructs an EventProperties object, taking a string for the property name.
		/// You must supply a non-empty name whenever you supply any custom properties for the event via <b>EventProperties</b>.
		/// </summary>
		EventProperties(const std::string& name);

		/// <summary>
		/// Constructs an EventProperties object (the default constructor).
		/// You must supply a non-empty name whenever you supply any custom properties for the event via <b>EventProperties</b>.
		/// </summary>
		EventProperties();

		/// <summary>
		/// The EventProperties copy constructor.
		/// </summary>
		EventProperties(EventProperties const& copy);
		
		/// <summary>
		/// The EventProperties equals operator overload.
		/// </summary>		
		EventProperties& operator=(EventProperties const& copy);
		
		/// <summary>
		/// Constructs an EventProperties object from a map of string to EventProperty.<br>
		/// You must supply a non-empty name whenever you supply any custom properties for the event via <b>EventProperties</b>.
		/// </summary>
		EventProperties(const std::string& name, const std::map<std::string, EventProperty> &properties);

		/// <summary>
		/// Adds a map of <string, EventProperty> to EventProperties.
		/// </summary>
		EventProperties& operator+=(const std::map<std::string, EventProperty> &properties);

		/// <summary>
		/// Assigns a map of <string, EventProperty> to EventProperties.
		/// </summary>
		EventProperties& operator=(const std::map<std::string, EventProperty> &properties);

		/// <summary>
		/// An EventProperties constructor using a C++11 initializer list.
		/// </summary>
		EventProperties(const std::string& name, std::initializer_list<std::pair<std::string const, EventProperty> > properties);

		/// <summary>
		/// An EventProperties assignment operator using C++11 initializer list.
		/// </summary>
		EventProperties& operator=(std::initializer_list<std::pair<std::string const, EventProperty> > properties);

		/// <summary>
		/// Sets the name of an event, given a string for the event name.
		/// You must supply a non-empty name whenever you supply any custom properties for the event via <b>EventProperties</b>.
		/// </summary>
		/// <param name="name">A string that contains the name of the event.</param>
		bool SetName(const std::string& name);

		/// <summary>
		/// Gets the name of an event. An empty string is returned if the name was never set.
		/// </summary>
		/// <returns>Name of the event</returns>
		const std::string& GetName() const;

		/// <summary>
		/// Sets the base type of an event.
		/// </summary>
		/// <param name="recordType">Base Type of event record.</param>
		bool SetType(const std::string& recordType);

		/// <summary>
		/// Gets the Base Type of an event.
		/// </summary>
		/// <returns>A string that contains the type of the event.</returns>
		const std::string& GetType() const;

		/// <summary>
		/// [optional] Sets the timestamp of an event, in milliseconds.
		/// <b>Note:</b> This method overrides the default timestamp generated by the telemetry system.
		/// </summary>
		/// <param name="timestampInEpochMillis">The UNIX timestamp in milliseconds. This is the amount of time since 00:00:00 
		/// Coordinated Universal Time (UTC), January, 1, 1970 (not counting leap seconds).</param>
		void SetTimestamp(const int64_t timestampInEpochMillis);

		/// <summary>
		/// Gets the timestamp of an event, in milliseconds.
		/// Zero is returned when the time stamp was not specified with SetTimestamp().
		/// </summary>
		/// <returns>The timestamp of the event, specified in milliseconds.</returns>
		int64_t GetTimestamp() const;

		/// <summary>
		/// [optional] Sets the transmit priority of an event.
		/// <b>Note:</b> If you don't specify a value, then the default priority is used.
		/// </summary>
		/// <param name="priority">The transmit priority.</param>
		void SetPriority(EventPriority priority);

		/// <summary>
		/// Gets the transmit priority of the event.
		/// </summary>
		/// <returns>The transmit priority.<returns>
		EventPriority GetPriority() const;

		/// <summary>
		/// [optional] Sets the policy bit flags for UTC (Universal Telemetry Client) usage of an event.
		/// <b>Note:</b> If you don't specify a value, then the default value is used.
		/// </summary>
		/// <param name="policyBitFlags">The policy bit flags.</param>
		void SetPolicyBitFlags(uint64_t policyBitFlags);

		/// <summary>
		/// Gets the Policy bit flags for UTC usage of an event.
		/// </summary>
		/// <returns>The transmit priority of the event.<returns>
		uint64_t GetPolicyBitFlags() const;

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, and an EventProperty for the value.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as an EventProperty object.</param>
		void SetProperty(const std::string& name, EventProperty value);

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, a character for the value, and a ::PiiKind for the kind of personal information.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as a character.</param>
		/// <param name='piiKind'>The kind of PII (Personal Identifiable Information) as one of the ::PiiKind enumeration values.</param>
		void SetProperty(const std::string& name, char const*  value, PiiKind piiKind = PiiKind_None);

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, a string for the value of the property, and a ::PiiKind for the kind of personal information.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>A string that contains the property value.</param>
		/// <param name='piiKind'>The kind of PII (Personal Identifiable Information) as one of the ::PiiKind enumeration values.</param>
		void SetProperty(const std::string& name, std::string  value, PiiKind piiKind = PiiKind_None);

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, the value as a double, and a ::PiiKind for the kind of personal information.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as a double.</param>
		/// <param name='piiKind'>The kind of PII (Personal Identifiable Information) as one of the ::PiiKind enumeration values.</param>
		void SetProperty(const std::string& name, double       value, PiiKind piiKind = PiiKind_None);

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, the value as a 64-bit signed integer, and a ::PiiKind for the kind of personal information.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as a 64-bit signed integer.</param>
		/// <param name='piiKind'>The kind of PII (Personal Identifiable Information) as one of the ::PiiKind enumeration values.</param>
		void SetProperty(const std::string& name, int64_t      value, PiiKind piiKind = PiiKind_None);

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, the value as a boolean, and a ::PiiKind for the kind of personal information.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as a boolean.</param>
		/// <param name='piiKind'>The kind of PII (Personal Identifiable Information) as one of the ::PiiKind enumeration values.</param>
		void SetProperty(const std::string& name, bool         value, PiiKind piiKind = PiiKind_None);

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, the value as a time_ticks_t object, and a ::PiiKind for the kind of personal information.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as a time_ticks_t object.</param>
		/// <param name='piiKind'>The kind of PII (Personal Identifiable Information) as one of the ::PiiKind enumeration values.</param>
		void SetProperty(const std::string& name, time_ticks_t value, PiiKind piiKind = PiiKind_None);

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, the value as a GUID_t (ARIA portable cross-platform 
		/// GUID) object, and a ::PiiKind for the kind of personal information.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as a GUID_t object.</param>
		/// <param name='piiKind'>The kind of PII (Personal Identifiable Information) as one of the ::PiiKind enumeration values.</param>
		void SetProperty(const std::string& name, GUID_t       value, PiiKind piiKind = PiiKind_None);

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, the value as a signed 8-bit integer, 
		/// and a ::PiiKind for the kind of personal information.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as a signed 8-bit integer.</param>
		/// <param name='piiKind'>The kind of PII (Personal Identifiable Information) as one of the ::PiiKind enumeration values.</param>
		void SetProperty(const std::string& name, int8_t       value, PiiKind piiKind = PiiKind_None) { SetProperty(name, (int64_t)value, piiKind); }

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, the value as a signed 16-bit integer, 
		/// and a ::PiiKind for the kind of personal information.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as a signed 16-bit integer.</param>
		/// <param name='piiKind'>The kind of PII (Personal Identifiable Information) as one of the ::PiiKind enumeration values.</param>
		void SetProperty(const std::string& name, int16_t      value, PiiKind piiKind = PiiKind_None) { SetProperty(name, (int64_t)value, piiKind); }

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, the value as a signed 32-bit integer, 
		/// and a ::PiiKind for the kind of personal information.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// All integer types are currently converted to int64_t.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as a signed 32-bit integer.</param>
		/// <param name='piiKind'>The kind of PII (Personal Identifiable Information) as one of the ::PiiKind enumeration values.</param>
		void SetProperty(const std::string& name, int32_t      value, PiiKind piiKind = PiiKind_None) { SetProperty(name, (int64_t)value, piiKind); }

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, the value as an unsigned 8-bit integer, 
		/// and a ::PiiKind for the kind of personal information.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// All integer types are currently converted to int64_t.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as a unsigned 8-bit integer.</param>
		/// <param name='piiKind'>The kind of PII (Personal Identifiable Information) as one of the ::PiiKind enumeration values.</param>
		void SetProperty(const std::string& name, uint8_t      value, PiiKind piiKind = PiiKind_None) { SetProperty(name, (int64_t)value, piiKind); }

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, the value as an unsigned 16-bit integer, 
		/// and a ::PiiKind for the kind of personal information.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// All integer types are currently converted to int64_t.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as a unsigned 16-bit integer.</param>
		/// <param name='piiKind'>The kind of PII (Personal Identifiable Information) as one of the ::PiiKind enumeration values.</param>
		void SetProperty(const std::string& name, uint16_t     value, PiiKind piiKind = PiiKind_None) { SetProperty(name, (int64_t)value, piiKind); }

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, the value as an unsigned 32-bit integer, 
		/// and a ::PiiKind for the kind of personal information.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// All integer types are currently converted to int64_t.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as a unsigned 32-bit integer.</param>
		/// <param name='piiKind'>The kind of PII (Personal Identifiable Information) as one of the ::PiiKind enumeration values.</param>
		void SetProperty(const std::string& name, uint32_t     value, PiiKind piiKind = PiiKind_None) { SetProperty(name, (int64_t)value, piiKind); }

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, the value as an unsigned 64-bit integer, 
		/// and a ::PiiKind for the kind of personal information.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// All integer types are currently converted to int64_t.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as a unsigned 64-bit integer.</param>
		/// <param name='piiKind'>The kind of PII (Personal Identifiable Information) as one of the ::PiiKind enumeration values.</param>
		void SetProperty(const std::string& name, uint64_t     value, PiiKind piiKind = PiiKind_None) { SetProperty(name, (int64_t)value, piiKind); }

		/// <summary>
		/// Sets a property for an event, taking a string for the property name, the value as a character, 
		/// and a ::CustomerContentKind for the kind of customer content.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>The property value as a character.</param>
		/// <param name='ccKind'>The kind of customer content as one of the ::CustomerContentKind enumeration values.</param>
        void SetProperty(const std::string& name, char const*  value, CustomerContentKind ccKind) { SetProperty(name, EventProperty(value, ccKind)); }
        
		/// <summary>
		/// Sets a property for an event, taking a string for the property name, a string for the value of the property, 
		/// and a ::CustomerContentKind for the kind of customer content.
		/// <b>Note:</b> This method either creates a new property if none originally exists, or it overwrites the existing property.
		/// </summary>
		/// <param name='name'>A string that contains the name of the property.</param>
		/// <param name='value'>A string that contains the property value.</param>
		/// <param name='ccKind'>The kind of customer content as one of the ::CustomerContentKind enumeration values.</param>
        void SetProperty(const std::string& name, std::string  value, CustomerContentKind ccKind) { SetProperty(name, EventProperty(value, ccKind)); }

		/// <summary>
		/// Gets the properties bag of an event.
		/// </summary>
		/// <returns>The properties bag.</returns>
		const std::map<std::string, EventProperty>& GetProperties() const;

		/// <summary>
		/// Gets the PII properties bag of an event.
		/// </summary>
		/// <returns>The PII properties bag of the event.</returns>
		const std::map<std::string, std::pair<std::string, PiiKind> > GetPiiProperties() const;

        /// <summary>
        /// Gets the Customer content properties bag of an event.
        /// </summary>
        /// <returns>The customer content properties bag of the event.</returns>
        const std::map<std::string, std::pair<std::string, CustomerContentKind> > GetCustomerContentProperties() const;

		virtual ~EventProperties();

	private:
		std::string*     m_eventNameP;
		std::string*     m_eventTypeP;
		EventPriority    m_eventPriority;
		uint64_t         m_eventPolicyBitflags;
		int64_t          m_timestampInMillis;

		std::map<std::string, EventProperty>* m_propertiesP;
	};

}}} // namespace Microsoft::Applications::Telemetry

#endif //MYAPPLICATION_EVENTPROPERTIES_H