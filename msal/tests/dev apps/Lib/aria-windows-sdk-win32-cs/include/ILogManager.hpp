// Copyright (c) Microsoft. All rights reserved.

#pragma once
#include "Version.hpp"
#include "Enums.hpp"
#include "ILogger.hpp"
#include "ISemanticContext.hpp"
#include "api/LogConfiguration.hpp"
#include <string>

// *INDENT-OFF*
namespace Microsoft { namespace Applications { namespace Telemetry {
// *INDENT-ON*

/// @cond INTERNAL_DOCS

/// <summary>
/// The ILogManager class manages the telemetry logging system.
/// </summary>
class ILogManager
{
  public:
    /// <summary>
    /// Initializes the telemetry logging system.
    /// </summary>
    /// <param name="configuration">Configuration settings to apply to the telemetry logging system.</param>
    /// <param name="runtimeConfig">The run-time configuration to apply to the telemetry logging system.</param>
    /// <returns>An ILogManager telemetry logging system instance created with the specified configuration.</returns>
    static ILogManager* Create(LogConfiguration& configuration, IRuntimeConfig* runtimeConfig);

    /// <summary>
    /// Destroys the telemetry logging system instance. This method calls FlushAndTeardown() implicitly.
    /// </summary>
    virtual ~ILogManager() {}

    /// <summary>
    /// Flushes any pending telemetry events in memory to disk, and tears-down the telemetry logging system.
    /// </summary>
    virtual void FlushAndTeardown() = 0;

    /// <summary>
    /// Flushes any pending telemetry events in memory to disk, to reduce possible data loss.
    /// This method can be expensive, so you should use it sparingly. The operating system blocks the calling thread
    /// and might flush the global file buffers (all buffered file system data) to disk, which can be
    /// time consuming.
    /// </summary>
    virtual void Flush() = 0;

	/// <summary>
	/// Attempts to send any pending telemetry events that are currently cached either in memory, or on disk.
	/// </summary>
	virtual void UploadNow() = 0;

    /// <summary>
    /// Pauses the transmission of events to the data collector.
    /// While paused, events continue to be queued on the client, cached either in memory or on disk.
    /// </summary>
    virtual void PauseTransmission() = 0;

    /// <summary>
    /// Resumes the transmission of events to the data collector.
    /// </summary>
    virtual void ResumeTransmission() = 0;

	/// <summary>
	/// Sets the transmit profile for event transmission - to one of the built-in profiles.
	/// A transmit profile is a collection of hardware and system settings (like network connectivity, power state)
	/// based on which to determine how events are to be transmitted. 
	/// </summary>
	/// <param name="profile">Transmit profile, as one of the ::TransmitProfile enumeration values.</param>
	/// <returns>This method doesn't return a value - because it always succeeds.</returns>
	virtual void  SetTransmitProfile(TransmitProfile profile) = 0;

  	/// <summary>
	/// Sets the transmit profile for event transmission.
	/// A transmit profile is a collection of hardware and system settings (like network connectivity, power state, etc.).
	/// </summary>
	/// <param name="profile">A string that contains the transmit profile.</param>
	/// <returns>A boolean value that indicates success (true) or failure (false).</returns>
	virtual bool  SetTransmitProfile(const std::string& profile)  = 0;

	/// <summary>
	/// Loads transmit profiles formatted in JSON.
	/// </summary>
	/// <param name="profiles_json">A string that contains the transmit profiles in JSON.</param>
	/// <returns>A boolean value that indicates success (true) or failure (false) if the configuration is invalid.</returns>
	virtual bool  LoadTransmitProfiles(std::string profiles_json)  = 0;

	/// <summary>
	/// Resets transmission profiles to default settings.
	/// </summary>
	virtual void  ResetTransmitProfiles() = 0;

	/// <summary>
	/// Gets the name of the current transmit profile.
	/// </summary>
	virtual const std::string& GetTransmitProfileName() = 0;

    /// <summary>
    /// Gets an ISemanticContext interface through which you can set context information 
    /// such as device, system, hardware, and user information.
    /// Context information set via this API applies to all logger instances until they
    /// are overwritten by an individual logger instance.
    /// </summary>
    /// <returns>A pointer to an ISemanticContext interface.</returns>
    virtual ISemanticContext& GetSemanticContext() = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// a string that contains the property value, 
    /// and tags the property with the kind of personal identifiable information.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
    /// <param name="value">A string that contains the context property value.</param>
    /// <param name='piiKind'>One of the ::PiiKind enumeration values. If you don't supply this value, 
    /// then the default value <i>PiiKind_None</i> is used.</param>
    virtual void SetContext(std::string const& name, std::string const& value, PiiKind piiKind = PiiKind_None) = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// a constant pointer to character that contains the property value, 
    /// and tags the property with the kind of personal identifiable information.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
	/// <param name="value">A constant pointer to a character that contains the value of the context property.</param>
    /// <param name='piiKind'>One of the ::PiiKind enumeration values. If you don't supply this value, 
    /// then the default value <i>PiiKind_None</i> is used.</param>
	virtual void SetContext(const std::string& name, const char *value, PiiKind piiKind = PiiKind_None) = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// a string that contains the property value, 
    /// and tags the property with the kind of customer content.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
    /// <param name="value">A string that contains the context property value.</param>
    /// <param name='ccKind'>The kind of customer content, as one of the ::CustomerContentKind enumeration values.</param>
    virtual void SetContext(const std::string& name, const std::string& value, CustomerContentKind ccKind) = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// a constant pointer to a character that contains the property value, 
    /// and tags the property with the kind of customer content.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
    /// <param name="value">A constant pointer to a character that contains the context property value.</param>
    /// <param name='ccKind'>The kind of customer content, as one of the ::CustomerContentKind enumeration values.</param>
    virtual void SetContext(const std::string& name, const char *value, CustomerContentKind ccKind) = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// a double that contains the property value, 
    /// and tags the property with the kind of personal identifiable information.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
	/// <param name="value">A double that contains the context property value.</param>
    /// <param name='piiKind'>One of the ::PiiKind enumeration values. If you don't supply this value, 
    /// then the default value <i>PiiKind_None</i> is used.</param>
	virtual void  SetContext(const std::string& name, double value, PiiKind piiKind = PiiKind_None)  = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// an int64_t that contains the property value, 
    /// and tags the property with the kind of personal identifiable information.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
	/// <param name="value">An int64_t that contains the context property value.</param>
    /// <param name='piiKind'>One of the ::PiiKind enumeration values. If you don't supply this value, 
    /// then the default value <i>PiiKind_None</i> is used.</param>
	virtual void  SetContext(const std::string& name, int64_t value, PiiKind piiKind = PiiKind_None) = 0;;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// an int8_t that contains the property value, 
    /// and tags the property with the kind of personal identifiable information.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
	/// <param name="value">An int8_t that contains the context property value.</param>
    /// <param name='piiKind'>One of the ::PiiKind enumeration values. If you don't supply this value, 
    /// then the default value <i>PiiKind_None</i> is used.</param>
	virtual void SetContext(const std::string& name, int8_t  value, PiiKind piiKind = PiiKind_None) = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// an int16_t that contains the property value, 
    /// and tags the property with the kind of personal identifiable information.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
	/// <param name="value">An int16_t that contains the context property value.</param>
    /// <param name='piiKind'>One of the ::PiiKind enumeration values. If you don't supply this value, 
    /// then the default value <i>PiiKind_None</i> is used.</param>
	virtual void SetContext(const std::string& name, int16_t value, PiiKind piiKind = PiiKind_None) = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// an int32_t that contains the property value, 
    /// and tags the property with the kind of personal identifiable information.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
	/// <param name="value">An int32_t that contains the context property value.</param>
    /// <param name='piiKind'>One of the ::PiiKind enumeration values. If you don't supply this value, 
    /// then the default value <i>PiiKind_None</i> is used.</param>
	virtual  void SetContext(const std::string& name, int32_t value, PiiKind piiKind = PiiKind_None) = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// a uint8_t that contains the property value, 
    /// and tags the property with the kind of personal identifiable information.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
	/// <param name="value">A uint8_t that contains the context property value.</param>
    /// <param name='piiKind'>One of the ::PiiKind enumeration values. If you don't supply this value, 
    /// then the default value <i>PiiKind_None</i> is used.</param>
	virtual  void SetContext(const std::string& name, uint8_t  value, PiiKind piiKind = PiiKind_None) = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// a uint16_t that contains the property value, 
    /// and tags the property with the kind of personal identifiable information.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
	/// <param name="value">A uint16_t that contains the context property value.</param>
    /// <param name='piiKind'>One of the ::PiiKind enumeration values. If you don't supply this value, 
    /// then the default value <i>PiiKind_None</i> is used.</param>
	virtual  void SetContext(const std::string& name, uint16_t value, PiiKind piiKind = PiiKind_None) = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// a uint32_t that contains the property value, 
    /// and tags the property with the kind of personal identifiable information.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
	/// <param name="value">A uint32_t that contains the context property value.</param>
    /// <param name='piiKind'>One of the ::PiiKind enumeration values. If you don't supply this value, 
    /// then the default value <i>PiiKind_None</i> is used.</param>
	virtual  void SetContext(const std::string& name, uint32_t value, PiiKind piiKind = PiiKind_None) = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// a uint64_t that contains the property value, 
    /// and tags the property with the kind of personal identifiable information.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
	/// <param name="value">A uint64_t that contains the context property value.</param>
    /// <param name='piiKind'>One of the ::PiiKind enumeration values. If you don't supply this value, 
    /// then the default value <i>PiiKind_None</i> is used.</param>
	virtual  void SetContext(const std::string& name, uint64_t value, PiiKind piiKind = PiiKind_None) = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// a boolean that contains the property value, 
    /// and tags the property with the kind of personal identifiable information.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
	/// <param name="value">A boolean that contains the context property value.</param>
    /// <param name='piiKind'>One of the ::PiiKind enumeration values. If you don't supply this value, 
    /// then the default value <i>PiiKind_None</i> is used.</param>
	virtual void  SetContext(const std::string& name, bool value, PiiKind piiKind = PiiKind_None) = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// a .NET time_ticks_t that contains the property value, 
    /// and tags the property with the kind of personal identifiable information.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
	/// <param name="value">A .NET time_ticks_t that contains the context property value.</param>
    /// <param name='piiKind'>One of the ::PiiKind enumeration values. If you don't supply this value, 
    /// then the default value <i>PiiKind_None</i> is used.</param>
	virtual void  SetContext(const std::string& name, time_ticks_t value, PiiKind piiKind = PiiKind_None) = 0;

    /// <summary>
    /// Adds (or overrides) a property of the custom context for the telemetry logging system, 
    /// taking a string that contains the name of the property, 
    /// a GUID_t that contains the property value, 
    /// and tags the property with the kind of personal identifiable information.
    /// <br><b>Note:</b> Context information set here applies to events generated by all %ILogger instances
    /// unless overwritten on a particular %ILogger instance.
    /// </summary>
    /// <param name="name">A string that contains the name of the context property.</param>
	/// <param name="value">A GUID_t that contains the context property value.</param>
    /// <param name='piiKind'>One of the ::PiiKind enumeration values. If you don't supply this value, 
    /// then the default value <i>PiiKind_None</i> is used.</param>
	virtual void  SetContext(const std::string& name, GUID_t value, PiiKind piiKind = PiiKind_None) = 0;

    /// <summary>
    /// Retrieves the ILogger interface of a Logger instance through which you can log telemetry events.
    /// It associates the ILogger interface with the specified experimentation project (e.g. ECS) for retrieving configuration context information.
    /// </summary>
    /// <param name="tenantToken">A string that contains the tenant token associated with this application.</param>
    /// <param name="source">A string that contains the name of the source of events.</param>
    /// <param name="experimentationProject">A string that contains the name of the experimentation project  
    /// whose configuration IDs are associated with events sent by this ILogger.</param>
    /// <returns>A pointer to the ILogger instance.</returns>
    virtual ILogger* GetLogger(std::string const& tenantToken, std::string const& source = std::string(), std::string const& experimentationProject = std::string()) = 0;

    /// <summary>
    /// Set tenant-specific event exclusion filter
    /// <param name="tenantToken">Token of the tenant with which the application is associated for collecting telemetry</param>
    /// <param name="filterStrings">The events to exclude from uploads, specified as an array of strings</param>
    /// <param name="filterCount">The number of strings in filterStrings</param>
    /// <returns>A positive value on success, a negative value on failure. Never returns 0</returns>
    /// </summary>
    virtual int32_t SetExclusionFilter(const char* tenantToken, const char** filterStrings, uint32_t filterCount) = 0;
};

/// @endcond

}}} // namespace Microsoft::Applications::Telemetry
